# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from sys import stderr, float_info
from traceback import print_exc, print_exception



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    #from . import _pycpsapi
    import _pycpsapi
else:
    import _pycpsapi

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


def _swig_repr(self):
    values = []
    for k in vars(self.__class__):
        if not k.startswith('_'):
            v = getattr(self, k)
            if isinstance(v, float):
                if v == float_info.max:
                    values.append("%s: None" % k)
                else:
                    values.append("%s: %.2f" % (k, v))
            elif isinstance(v, int):
                values.append("%s: %i" % (k, v))
            else:
                values.append('%s: "%s"' % (k, v))

    return "<%s.%s; %s>" % (self.__class__.__module__, self.__class__.__name__, ', '.join(values))

MSG_RSP_INFO = _pycpsapi.MSG_RSP_INFO
class ST_MsgRsp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    error_code = property(_pycpsapi.ST_MsgRsp_error_code_get, _pycpsapi.ST_MsgRsp_error_code_set)
    error_msg = property(_pycpsapi.ST_MsgRsp_error_msg_get, _pycpsapi.ST_MsgRsp_error_msg_set)

    def __init__(self):
        _pycpsapi.ST_MsgRsp_swiginit(self, _pycpsapi.new_ST_MsgRsp())
    __swig_destroy__ = _pycpsapi.delete_ST_MsgRsp

# Register ST_MsgRsp in _pycpsapi:
_pycpsapi.ST_MsgRsp_swigregister(ST_MsgRsp)

MSG_REQ_AUTH = _pycpsapi.MSG_REQ_AUTH
class ST_ReqAuth(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    client_key = property(_pycpsapi.ST_ReqAuth_client_key_get, _pycpsapi.ST_ReqAuth_client_key_set)
    client_secret = property(_pycpsapi.ST_ReqAuth_client_secret_get, _pycpsapi.ST_ReqAuth_client_secret_set)

    def __init__(self):
        _pycpsapi.ST_ReqAuth_swiginit(self, _pycpsapi.new_ST_ReqAuth())
    __swig_destroy__ = _pycpsapi.delete_ST_ReqAuth

# Register ST_ReqAuth in _pycpsapi:
_pycpsapi.ST_ReqAuth_swigregister(ST_ReqAuth)

MSG_RSP_AUTH = _pycpsapi.MSG_RSP_AUTH
class ST_RspAuth(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    client_key = property(_pycpsapi.ST_RspAuth_client_key_get, _pycpsapi.ST_RspAuth_client_key_set)
    info = property(_pycpsapi.ST_RspAuth_info_get, _pycpsapi.ST_RspAuth_info_set)

    def __init__(self):
        _pycpsapi.ST_RspAuth_swiginit(self, _pycpsapi.new_ST_RspAuth())
    __swig_destroy__ = _pycpsapi.delete_ST_RspAuth

# Register ST_RspAuth in _pycpsapi:
_pycpsapi.ST_RspAuth_swigregister(ST_RspAuth)

E_CPS_TYPE_DEVICE = _pycpsapi.E_CPS_TYPE_DEVICE
E_CPS_TYPE_APP = _pycpsapi.E_CPS_TYPE_APP
E_CPS_TYPE_MIX = _pycpsapi.E_CPS_TYPE_MIX
class CCPSEventHandler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def OnConnected(self) -> "void":
        return _pycpsapi.CCPSEventHandler_OnConnected(self)

    def OnDisconnected(self) -> "void":
        return _pycpsapi.CCPSEventHandler_OnDisconnected(self)

    def OnDeviceOnline(self, dev_id: "uint32_t") -> "void":
        return _pycpsapi.CCPSEventHandler_OnDeviceOnline(self, dev_id)

    def OnDeviceOffline(self, dev_id: "uint32_t") -> "void":
        return _pycpsapi.CCPSEventHandler_OnDeviceOffline(self, dev_id)

    def OnMsg(self, from_id: "uint32_t", msg_type: "uint32_t", data: "char const *", msg_len: "uint32_t") -> "void":
        return _pycpsapi.CCPSEventHandler_OnMsg(self, from_id, msg_type, data, msg_len)
    __swig_destroy__ = _pycpsapi.delete_CCPSEventHandler

    def pyError(self, type, value, traceback):
        '''Handles an error thrown during invocation of an method.

        Arguments are those provided by sys.exc_info()
        '''
        stderr.write("Exception thrown during method dispatch:\n")
        print_exception(type, value, traceback)


    def __init__(self):
        if self.__class__ == CCPSEventHandler:
            _self = None
        else:
            _self = self
        _pycpsapi.CCPSEventHandler_swiginit(self, _pycpsapi.new_CCPSEventHandler(_self, ))
    def __disown__(self):
        self.this.disown()
        _pycpsapi.disown_CCPSEventHandler(self)
        return weakref.proxy(self)

# Register CCPSEventHandler in _pycpsapi:
_pycpsapi.CCPSEventHandler_swigregister(CCPSEventHandler)

class CCPSAPI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def CreateAPI() -> "CCPSAPI *":
        return _pycpsapi.CCPSAPI_CreateAPI()

    @staticmethod
    def GetApiVersion() -> "char const *":
        return _pycpsapi.CCPSAPI_GetApiVersion()

    def Init(self, api_type: "E_CPS_TYPE", dev_id: "uint32_t", app_id: "uint32_t", server_ip: "char const *", server_port: "int", log_ip: "char const *", log_port: "int", handler: "CCPSEventHandler") -> "int":
        return _pycpsapi.CCPSAPI_Init(self, api_type, dev_id, app_id, server_ip, server_port, log_ip, log_port, handler)

    def Release(self) -> "void":
        return _pycpsapi.CCPSAPI_Release(self)

    def RegisterDevice(self) -> "int":
        return _pycpsapi.CCPSAPI_RegisterDevice(self)

    def UnregisterDevice(self) -> "int":
        return _pycpsapi.CCPSAPI_UnregisterDevice(self)

    def SendDeviceMsg(self, app_id: "int", msg_type: "uint32_t", data: "char const *", msg_len: "uint32_t") -> "int":
        return _pycpsapi.CCPSAPI_SendDeviceMsg(self, app_id, msg_type, data, msg_len)

    def SubscribeDevice(self, device_id: "uint32_t") -> "int":
        return _pycpsapi.CCPSAPI_SubscribeDevice(self, device_id)

    def UnSubscribeDevice(self, device_id: "uint32_t") -> "int":
        return _pycpsapi.CCPSAPI_UnSubscribeDevice(self, device_id)

    def IsDeviceOnline(self, device_id: "uint32_t") -> "bool":
        return _pycpsapi.CCPSAPI_IsDeviceOnline(self, device_id)

    def SendAPPMsg(self, device_id: "uint32_t", msg_type: "uint32_t", data: "char const *", msg_len: "uint32_t") -> "int":
        return _pycpsapi.CCPSAPI_SendAPPMsg(self, device_id, msg_type, data, msg_len)

    def SendMsg(self, msg_type: "uint32_t", data: "char const *", msg_len: "uint32_t") -> "int":
        return _pycpsapi.CCPSAPI_SendMsg(self, msg_type, data, msg_len)
    __swig_destroy__ = _pycpsapi.delete_CCPSAPI

# Register CCPSAPI in _pycpsapi:
_pycpsapi.CCPSAPI_swigregister(CCPSAPI)

def CCPSAPI_CreateAPI() -> "CCPSAPI *":
    return _pycpsapi.CCPSAPI_CreateAPI()

def CCPSAPI_GetApiVersion() -> "char const *":
    return _pycpsapi.CCPSAPI_GetApiVersion()


def cps_log(*args) -> "int":
    return _pycpsapi.cps_log(*args)
CPS_LOG_FORMAT_PREFIX = _pycpsapi.CPS_LOG_FORMAT_PREFIX


