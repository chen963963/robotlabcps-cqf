# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from sys import stderr, float_info
from traceback import print_exc, print_exception



from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pycpsapi')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pycpsapi')
    _pycpsapi = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pycpsapi', [dirname(__file__)])
        except ImportError:
            import _pycpsapi
            return _pycpsapi
        try:
            _mod = imp.load_module('_pycpsapi', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pycpsapi = swig_import_helper()
    del swig_import_helper
else:
    import _pycpsapi
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x



def _swig_repr(self):
    values = []
    for k in vars(self.__class__):
        if not k.startswith('_'):
            v = getattr(self, k)
            if isinstance(v, float):
                if v == float_info.max:
                    values.append("%s: None" % k)
                else:
                    values.append("%s: %.2f" % (k, v))
            elif isinstance(v, int):
                values.append("%s: %i" % (k, v))
            else:
                values.append('%s: "%s"' % (k, v))

    return "<%s.%s; %s>" % (self.__class__.__module__, self.__class__.__name__, ', '.join(values))

MSG_RSP_INFO = _pycpsapi.MSG_RSP_INFO
class ST_MsgRsp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ST_MsgRsp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ST_MsgRsp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["error_code"] = _pycpsapi.ST_MsgRsp_error_code_set
    __swig_getmethods__["error_code"] = _pycpsapi.ST_MsgRsp_error_code_get
    if _newclass:
        error_code = _swig_property(_pycpsapi.ST_MsgRsp_error_code_get, _pycpsapi.ST_MsgRsp_error_code_set)
    __swig_setmethods__["error_msg"] = _pycpsapi.ST_MsgRsp_error_msg_set
    __swig_getmethods__["error_msg"] = _pycpsapi.ST_MsgRsp_error_msg_get
    if _newclass:
        error_msg = _swig_property(_pycpsapi.ST_MsgRsp_error_msg_get, _pycpsapi.ST_MsgRsp_error_msg_set)

    def __init__(self):
        this = _pycpsapi.new_ST_MsgRsp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycpsapi.delete_ST_MsgRsp
    __del__ = lambda self: None
ST_MsgRsp_swigregister = _pycpsapi.ST_MsgRsp_swigregister
ST_MsgRsp_swigregister(ST_MsgRsp)

MSG_REQ_AUTH = _pycpsapi.MSG_REQ_AUTH
class ST_ReqAuth(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ST_ReqAuth, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ST_ReqAuth, name)
    __repr__ = _swig_repr
    __swig_setmethods__["client_key"] = _pycpsapi.ST_ReqAuth_client_key_set
    __swig_getmethods__["client_key"] = _pycpsapi.ST_ReqAuth_client_key_get
    if _newclass:
        client_key = _swig_property(_pycpsapi.ST_ReqAuth_client_key_get, _pycpsapi.ST_ReqAuth_client_key_set)
    __swig_setmethods__["client_secret"] = _pycpsapi.ST_ReqAuth_client_secret_set
    __swig_getmethods__["client_secret"] = _pycpsapi.ST_ReqAuth_client_secret_get
    if _newclass:
        client_secret = _swig_property(_pycpsapi.ST_ReqAuth_client_secret_get, _pycpsapi.ST_ReqAuth_client_secret_set)

    def __init__(self):
        this = _pycpsapi.new_ST_ReqAuth()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycpsapi.delete_ST_ReqAuth
    __del__ = lambda self: None
ST_ReqAuth_swigregister = _pycpsapi.ST_ReqAuth_swigregister
ST_ReqAuth_swigregister(ST_ReqAuth)

MSG_RSP_AUTH = _pycpsapi.MSG_RSP_AUTH
class ST_RspAuth(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ST_RspAuth, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ST_RspAuth, name)
    __repr__ = _swig_repr
    __swig_setmethods__["client_key"] = _pycpsapi.ST_RspAuth_client_key_set
    __swig_getmethods__["client_key"] = _pycpsapi.ST_RspAuth_client_key_get
    if _newclass:
        client_key = _swig_property(_pycpsapi.ST_RspAuth_client_key_get, _pycpsapi.ST_RspAuth_client_key_set)
    __swig_setmethods__["info"] = _pycpsapi.ST_RspAuth_info_set
    __swig_getmethods__["info"] = _pycpsapi.ST_RspAuth_info_get
    if _newclass:
        info = _swig_property(_pycpsapi.ST_RspAuth_info_get, _pycpsapi.ST_RspAuth_info_set)

    def __init__(self):
        this = _pycpsapi.new_ST_RspAuth()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pycpsapi.delete_ST_RspAuth
    __del__ = lambda self: None
ST_RspAuth_swigregister = _pycpsapi.ST_RspAuth_swigregister
ST_RspAuth_swigregister(ST_RspAuth)

E_CPS_TYPE_DEVICE = _pycpsapi.E_CPS_TYPE_DEVICE
E_CPS_TYPE_APP = _pycpsapi.E_CPS_TYPE_APP
E_CPS_TYPE_MIX = _pycpsapi.E_CPS_TYPE_MIX
class CCPSEventHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCPSEventHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCPSEventHandler, name)
    __repr__ = _swig_repr

    def OnConnected(self) -> "void":
        return _pycpsapi.CCPSEventHandler_OnConnected(self)

    def OnDisconnected(self) -> "void":
        return _pycpsapi.CCPSEventHandler_OnDisconnected(self)

    def OnDeviceOnline(self, dev_id: 'uint32_t') -> "void":
        return _pycpsapi.CCPSEventHandler_OnDeviceOnline(self, dev_id)

    def OnDeviceOffline(self, dev_id: 'uint32_t') -> "void":
        return _pycpsapi.CCPSEventHandler_OnDeviceOffline(self, dev_id)

    def OnMsg(self, from_id: 'uint32_t', msg_type: 'uint32_t', data: 'char const *', msg_len: 'uint32_t') -> "void":
        return _pycpsapi.CCPSEventHandler_OnMsg(self, from_id, msg_type, data, msg_len)
    __swig_destroy__ = _pycpsapi.delete_CCPSEventHandler
    __del__ = lambda self: None

    def pyError(self, type, value, traceback):
        '''Handles an error thrown during invocation of an method.

        Arguments are those provided by sys.exc_info()
        '''
        stderr.write("Exception thrown during method dispatch:\n")
        print_exception(type, value, traceback)


    def __init__(self):
        if self.__class__ == CCPSEventHandler:
            _self = None
        else:
            _self = self
        this = _pycpsapi.new_CCPSEventHandler(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _pycpsapi.disown_CCPSEventHandler(self)
        return weakref_proxy(self)
CCPSEventHandler_swigregister = _pycpsapi.CCPSEventHandler_swigregister
CCPSEventHandler_swigregister(CCPSEventHandler)

class CCPSAPI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCPSAPI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCPSAPI, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        CreateAPI = staticmethod(_pycpsapi.CCPSAPI_CreateAPI)
    else:
        CreateAPI = _pycpsapi.CCPSAPI_CreateAPI
    if _newclass:
        GetApiVersion = staticmethod(_pycpsapi.CCPSAPI_GetApiVersion)
    else:
        GetApiVersion = _pycpsapi.CCPSAPI_GetApiVersion

    def Init(self, api_type: 'E_CPS_TYPE', dev_id: 'uint32_t', app_id: 'uint32_t', server_ip: 'char const *', server_port: 'int', log_ip: 'char const *', log_port: 'int', handler: 'CCPSEventHandler') -> "int":
        return _pycpsapi.CCPSAPI_Init(self, api_type, dev_id, app_id, server_ip, server_port, log_ip, log_port, handler)

    def Release(self) -> "void":
        return _pycpsapi.CCPSAPI_Release(self)

    def RegisterDevice(self) -> "int":
        return _pycpsapi.CCPSAPI_RegisterDevice(self)

    def UnregisterDevice(self) -> "int":
        return _pycpsapi.CCPSAPI_UnregisterDevice(self)

    def SendDeviceMsg(self, app_id: 'int', msg_type: 'uint32_t', data: 'char const *', msg_len: 'uint32_t') -> "int":
        return _pycpsapi.CCPSAPI_SendDeviceMsg(self, app_id, msg_type, data, msg_len)

    def SubscribeDevice(self, device_id: 'uint32_t') -> "int":
        return _pycpsapi.CCPSAPI_SubscribeDevice(self, device_id)

    def UnSubscribeDevice(self, device_id: 'uint32_t') -> "int":
        return _pycpsapi.CCPSAPI_UnSubscribeDevice(self, device_id)

    def IsDeviceOnline(self, device_id: 'uint32_t') -> "bool":
        return _pycpsapi.CCPSAPI_IsDeviceOnline(self, device_id)

    def SendAPPMsg(self, device_id: 'uint32_t', msg_type: 'uint32_t', data: 'char const *', msg_len: 'uint32_t') -> "int":
        return _pycpsapi.CCPSAPI_SendAPPMsg(self, device_id, msg_type, data, msg_len)

    def SendMsg(self, msg_type: 'uint32_t', data: 'char const *', msg_len: 'uint32_t') -> "int":
        return _pycpsapi.CCPSAPI_SendMsg(self, msg_type, data, msg_len)
    __swig_destroy__ = _pycpsapi.delete_CCPSAPI
    __del__ = lambda self: None
CCPSAPI_swigregister = _pycpsapi.CCPSAPI_swigregister
CCPSAPI_swigregister(CCPSAPI)

def CCPSAPI_CreateAPI() -> "CCPSAPI *":
    return _pycpsapi.CCPSAPI_CreateAPI()
CCPSAPI_CreateAPI = _pycpsapi.CCPSAPI_CreateAPI

def CCPSAPI_GetApiVersion() -> "char const *":
    return _pycpsapi.CCPSAPI_GetApiVersion()
CCPSAPI_GetApiVersion = _pycpsapi.CCPSAPI_GetApiVersion


def cps_log(level: 'unsigned int', format: 'char const *') -> "int":
    return _pycpsapi.cps_log(level, format)
cps_log = _pycpsapi.cps_log
CPS_LOG_FORMAT_PREFIX = _pycpsapi.CPS_LOG_FORMAT_PREFIX
# This file is compatible with both classic and new-style classes.


